package renren.iat.modules.watcher;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import org.junit.Test;import org.junit.rules.TestRule;import org.junit.runner.Description;import org.junit.runners.model.Statement;import renren.iat.modules.db.DBLogical;import renren.iat.modules.log.MemoryLog;import renren.iat.modules.log.RunLog;/** *  * @author XuXiaolong *  */public class TestMethodWatcher implements TestRule {	private final DBLogical dbLogical = new DBLogical();	private RunLog runLog = new RunLog();	private boolean flag = false;	public TestMethodWatcher() {	}	/**	 * 	 * @param isLogDumpToFile	 *            是否将运行log保存到文件中	 */	public TestMethodWatcher(boolean isLogDumpToFile) {		this.flag = isLogDumpToFile;	}	public Statement apply(final Statement base, final Description description) {		return new Statement() {			@Override			public void evaluate() throws Throwable {				TestMethodWatcher.this.starting(description);				try {					base.evaluate();					TestMethodWatcher.this.succeeded(description);				} catch (AssertionError e) {					TestMethodWatcher.this.assumptionFailed(e, description);					throw e;				} catch (Throwable t) {					TestMethodWatcher.this.failed(t, description);					throw t;				} finally {					TestMethodWatcher.this.finished(description);				}			}		};	}	/**	 * 当测试用例开始运行时运行此方法	 * 	 * @param description	 */	protected void starting(Description description) {		System.out.println("测试用例已经开始运行,请稍候...");		this.runLog = new RunLog();		this.runLog.SetStartTime();	}	/**	 * 运行成功时运行此方法	 * 	 * @param description	 */	protected void succeeded(Description description) {		this.runLog.SuccessInfo = 0;	}	/**	 * 用例出现预测失败时运行此方法,并记录错误信息	 * 	 * @param e	 * @param description	 */	protected void assumptionFailed(AssertionError e, Description description) {		this.runLog.SuccessInfo = 1;		this.runLog.ErrorMsg = "用例在某个预测操作时失败,失败原因如下:\n" + e.getMessage();	}	/**	 * 用例出现测试代码异常时将运行此方法,并记录错误信息	 * 	 * @param e	 * @param description	 */	protected void failed(Throwable e, Description description) {		this.runLog.SuccessInfo = 2;		this.runLog.ErrorMsg = "用例程序抛出异常:" + e.getClass()				+ ",很可能是测试代码出现错误,异常信息如下:\n" + e.getMessage();	}	/**	 * 用例结束时运行此方法,用于显示运行结果,验证方法名,如果符合规范则将结果入库,否则给出错误信息且取消入库	 * 	 * @param description	 */	protected void finished(Description description) {		this.runLog.SetEndTime();		// 显示运行过程中每步的结果		// System.out.println(MemoryLog.LogInstance());		if (this.flag == true) {			File logFile = new File("log" + System.currentTimeMillis() + ".txt");			BufferedWriter output;			try {				output = new BufferedWriter(new FileWriter(logFile));				output.write(MemoryLog.LogInstance().toString());				output.flush();				output.close();			} catch (IOException e) {				e.printStackTrace();			}		}		Test test = description.getAnnotation(org.junit.Test.class);		String checkInfo = this.CheckMethodName(description.getMethodName(),				test);		if (this.runLog.SuccessInfo != 0) {			System.err.println(this.runLog.ErrorMsg);		} else {			System.out.println("用例运行成功!");		}		if (checkInfo == "") {			// System.out.println("测试结果正在入库,请稍候...");			// this.dbLogical.SetPrjName("Config/mySqlInit.properties", "PM");			// // 同步测试用例			// int testcaseId = this.dbLogical.SyncTestcase(			// description.getMethodName(), test.summary(),			// test.expectedResults(), test.author());			// // 同步本次运行信息			// this.dbLogical.SyncRun(this.runLog, testcaseId, 0);			System.out.println(this.dbLogical.GetErrMsg());		} else {			System.out.println("出现某些错误,自动取消数据库操作,这是由于" + checkInfo);		}		// 将MemoryLog中的信息清空		MemoryLog.LogInstance().Clear();	}	/**	 * 验证方法名是否符合规范,符合则返回"",不符合返回错误信息	 * 	 * @param methodName	 * @param test	 * @return	 */	private String CheckMethodName(String methodName, Test test) {		String errorInfo = "";		if (test.author().equals("")) {			errorInfo += "\n\t-未定义@Test中的author属性,请重新定义;";		} else if (test.summary().equals("")) {			errorInfo += "\n\t-未定义@Test中的summary属性,请重新定义;";		} else if (test.expectedResults().equals("")) {			errorInfo += "\n\t-未定义@Test中的expectResults属性,请重新定义;";		} else if (test.importance().equals("")) {			errorInfo += "\n\t-未定义@Test中的importance属性,请重新定义;";		} else if (test.index() <= 0) {			errorInfo += "\n\t-未定义@Test中的index属性,请重新定义;";		}		return errorInfo;	}}